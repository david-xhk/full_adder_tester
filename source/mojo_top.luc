module mojo_top (
    input clk,               // 50MHz clock
    input rst_n,             // reset button (active low)
    output led [8],          // 8 user controllable LEDs
    input cclk,              // configuration clock, AVR ready when high
    output spi_miso,         // AVR SPI MISO
    input spi_ss,            // AVR SPI Slave Select
    input spi_mosi,          // AVR SPI MOSI
    input spi_sck,           // AVR SPI Clock
    output spi_channel [4],  // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,            // AVR TX (FPGA RX)
    output avr_rx,           // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],    // LEDs on IO Shield
    output io_seg [8],       // 7-segment LEDs on IO Shield
    output io_sel [4],       // Digit select on IO Shield
    input io_button [5],     // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    output a_out,   // A output to full adder
    output b_out,   // B output to full adder
    output cin_out  // Cin output to full adder
  ) {
  
  sig rst;  // reset signal

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    dff previous_channel[1];  // stores the previous channel that was sampled. '0' is channel A0, '1' is channel A1.
    dff s_state[1];           // stores the last state of S every alternate CLK cycle
    dff cout_state[1];        // stores the last state of Cout every other alternate CLK cycle
    
    .rst(rst) {
      // instantiate the FSM for our tester
      testerfsm myTesterFSM;
      
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
    }
    
  }
  
  always {
    // IO Shield default configuration
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    
    // AVR interface default configuration
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;    
    avr.tx_block = avr_rx_busy; // block TX when AVR is avr_rx_busyZ
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // unused serial port
    avr.tx_data = 8hxx;  // don't care
    avr.new_tx_data = 0; // no data
    
    
    
    // Our configuration
    cin_out = myTesterFSM.cin_out;  // Cin output to full adder
    b_out = myTesterFSM.b_out;      // B output to full adder
    a_out = myTesterFSM.a_out;      // A output to full adder
    
    myTesterFSM.cin_switch = io_dip[2][5];  // Cin switch for manual mode
    myTesterFSM.b_switch = io_dip[2][6];    // B switch for manual mode
    myTesterFSM.a_switch = io_dip[2][7];    // A switch for manual mode
    myTesterFSM.m_switch = io_dip[0][0];    // M switch for toggling between manual and automatic mode

    io_led[0][0] = io_dip[0][0];         // LED for M switch
    io_led[2][5] = myTesterFSM.cin_out;  // LED for Cin output to full adder
    io_led[2][6] = myTesterFSM.b_out;    // LED for B output to full adder
    io_led[2][7] = myTesterFSM.a_out;    // LED for A output to full adder
    io_led[1][6] = s_state.q;            // LED for S input from full adder
    io_led[1][7] = cout_state.q;         // LED for Cout input from full adder
    
    if (previous_channel.q == 0) {  // if previous channel sampled was 0
      avr.channel = h1;             // set channel to sample as 1
      if (avr.sample_channel == 1)  // make sure that channel being sampled is A1
        s_state.d = avr.sample[9];  // save the MSB of sample from A1 into S state
        previous_channel.d = 1;     // set 1 as the previous channel sampled
    }
    else {                             // if previous channel sampled was 1
      avr.channel = h0;                // set channel to sample as 0
      if (avr.sample_channel == 0)     // make sure that channel being sampled is A0
        cout_state.d = avr.sample[9];  // save the MSB of sample from A0 into Cout state
        previous_channel.d = 0;        // set 0 as the previous channel sampled
    }
  }
}