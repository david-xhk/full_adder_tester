/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a_out,
    output reg b_out,
    output reg cin_out
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [0:0] M_previous_channel_d, M_previous_channel_q = 1'h0;
  reg [0:0] M_s_state_d, M_s_state_q = 1'h0;
  reg [0:0] M_cout_state_d, M_cout_state_q = 1'h0;
  wire [1-1:0] M_myTesterFSM_a_out;
  wire [1-1:0] M_myTesterFSM_b_out;
  wire [1-1:0] M_myTesterFSM_cin_out;
  reg [1-1:0] M_myTesterFSM_a_switch;
  reg [1-1:0] M_myTesterFSM_b_switch;
  reg [1-1:0] M_myTesterFSM_cin_switch;
  reg [1-1:0] M_myTesterFSM_m_switch;
  testerfsm_2 myTesterFSM (
    .clk(clk),
    .rst(rst),
    .a_switch(M_myTesterFSM_a_switch),
    .b_switch(M_myTesterFSM_b_switch),
    .cin_switch(M_myTesterFSM_cin_switch),
    .m_switch(M_myTesterFSM_m_switch),
    .a_out(M_myTesterFSM_a_out),
    .b_out(M_myTesterFSM_b_out),
    .cin_out(M_myTesterFSM_cin_out)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_3 avr (
    .clk(clk),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  
  always @* begin
    M_previous_channel_d = M_previous_channel_q;
    M_s_state_d = M_s_state_q;
    M_cout_state_d = M_cout_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_avr_tx_data = 8'bxxxxxxxx;
    M_avr_new_tx_data = 1'h0;
    cin_out = M_myTesterFSM_cin_out;
    b_out = M_myTesterFSM_b_out;
    a_out = M_myTesterFSM_a_out;
    M_myTesterFSM_cin_switch = io_dip[16+5+0-:1];
    M_myTesterFSM_b_switch = io_dip[16+6+0-:1];
    M_myTesterFSM_a_switch = io_dip[16+7+0-:1];
    M_myTesterFSM_m_switch = io_dip[0+0+0-:1];
    io_led[0+0+0-:1] = io_dip[0+0+0-:1];
    io_led[16+5+0-:1] = M_myTesterFSM_cin_out;
    io_led[16+6+0-:1] = M_myTesterFSM_b_out;
    io_led[16+7+0-:1] = M_myTesterFSM_a_out;
    if (M_previous_channel_q == 1'h0) begin
      M_avr_channel = 4'h1;
      if (M_avr_sample_channel == 1'h1) begin
        M_s_state_d = M_avr_sample[9+0-:1];
      end
      M_previous_channel_d = 1'h1;
    end else begin
      M_avr_channel = 4'h0;
      if (M_avr_sample_channel == 1'h0) begin
        M_cout_state_d = M_avr_sample[9+0-:1];
      end
      M_previous_channel_d = 1'h0;
    end
    io_led[8+7+0-:1] = M_s_state_q;
    io_led[8+6+0-:1] = M_cout_state_q;
  end
  
  always @(posedge clk) begin
    M_previous_channel_q <= M_previous_channel_d;
    M_s_state_q <= M_s_state_d;
    M_cout_state_q <= M_cout_state_d;
  end
  
endmodule
